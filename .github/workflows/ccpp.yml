name: C/C++ CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  pdf:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: Install LaTeX
      run: sudo apt-get update && sudo apt-get install -y texlive-latex-base texlive-latex-recommended texlive-latex-extra
    - name: Build PDF
      run: make kactl

  style:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v2
    - name: Check style
      run: make test-style

  test-problems:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: Check test problems
      run: make test-test-problems

  compiles:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - name: Cache ccache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-
    - name: Setup ccache
      run: |
        sudo apt-get update && sudo apt-get install -y ccache
        ccache --max-size=2G
        ccache --set-config=compression=true
        ccache --set-config=prefix_command=
        echo "Using ccache in: $HOME/.ccache"
        echo "CC='ccache gcc'" >> $GITHUB_ENV
        echo "CXX='ccache g++'" >> $GITHUB_ENV
        echo "$(which ccache)" >> $GITHUB_PATH
    - name: Run compilation tests
      env:
        CCACHE_COMPRESS: "true"
        CCACHE_MAXSIZE: "2G"
        CCACHE_DIR: ~/.ccache
        CCACHE_VERBOSE: "1"  # Enable verbose output to debug cache hits/misses
      run: |
        ccache -z  # Clear stats
        make test-compiles
        ccache -s  # Print stats to verify cache usage

  stress-tests:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        test-group: [data-structures, geometry, graph, number-theory, numerical, strings, various]
    steps:
    - uses: actions/checkout@v2
    - name: Cache ccache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ matrix.test-group }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ matrix.test-group }}-
          ${{ runner.os }}-ccache-
    - name: Setup ccache
      run: |
        sudo apt-get update && sudo apt-get install -y ccache
        ccache --max-size=2G
        ccache --set-config=compression=true
        ccache --set-config=prefix_command=
        echo "Using ccache in: $HOME/.ccache"
        echo "CC='ccache gcc'" >> $GITHUB_ENV
        echo "CXX='ccache g++'" >> $GITHUB_ENV
        echo "$(which ccache)" >> $GITHUB_PATH
    - name: Run stress tests (${{ matrix.test-group }})
      env:
        CCACHE_COMPRESS: "true"
        CCACHE_MAXSIZE: "2G"
        CCACHE_DIR: ~/.ccache
        CCACHE_VERBOSE: "1"  # Enable verbose output to debug cache hits/misses
      run: |
        ccache -z  # Clear stats
        make test-group-${{ matrix.test-group }}
        ccache -s  # Print stats to verify cache usage
